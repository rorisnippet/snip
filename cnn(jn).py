# -*- coding: utf-8 -*-
"""CNN(JN)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tVNDq0vxtKqlpCqjr3Os7-UFEoJLiOd7
"""

import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

def process_image(image_path, kernel_size=3, pooling_size=2):

    # Configure plotting
    plt.rc('figure', autolayout=True)
    plt.rc('image', cmap='magma')

    # Define edge detection kernel
    center = kernel_size ** 2 - 1
    kernel = np.full((kernel_size, kernel_size), -1)
    kernel[kernel_size//2, kernel_size//2] = center
    kernel = tf.constant(kernel)

    # Load and preprocess image
    image = tf.io.read_file(image_path)
    image = tf.io.decode_jpeg(image, channels=1)
    image = tf.image.resize(image, size=[300, 300])
    image = tf.image.convert_image_dtype(image, dtype=tf.float32)

    # Prepare inputs for convolution
    image_input = tf.expand_dims(image, axis=0)
    kernel = tf.reshape(kernel, [*kernel.shape, 1, 1])
    kernel = tf.cast(kernel, dtype=tf.float32)

    # Apply convolution, ReLU, and pooling
    conv_output = tf.nn.conv2d(image_input, kernel, strides=1, padding='SAME')
    activation = tf.nn.relu(conv_output)
    pooling = tf.nn.pool(activation,
                        window_shape=(pooling_size, pooling_size),
                        pooling_type='MAX',
                        strides=(pooling_size, pooling_size),
                        padding='SAME')

    # Plot results
    fig, axs = plt.subplots(2, 2, figsize=(10, 10))
    fig.suptitle('Image Processing Steps')

    # Original image
    axs[0, 0].imshow(tf.squeeze(image), cmap='gray')
    axs[0, 0].set_title('Original')
    axs[0, 0].axis('off')

    # Convolution result
    axs[0, 1].imshow(tf.squeeze(conv_output))
    axs[0, 1].set_title('Convolution')
    axs[0, 1].axis('off')

    # Activation result
    axs[1, 0].imshow(tf.squeeze(activation))
    axs[1, 0].set_title('ReLU Activation')
    axs[1, 0].axis('off')

    # Pooling result
    axs[1, 1].imshow(tf.squeeze(pooling))
    axs[1, 1].set_title('Max Pooling')
    axs[1, 1].axis('off')

    plt.tight_layout()
    plt.show()

process_image('/content/pothole image.jpg')